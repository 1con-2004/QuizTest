---
description: 
globs: 
alwaysApply: true
---
# 前端架构指南

项目前端位于[frontend/](mdc:frontend)目录，使用React框架开发。

## 目录结构

- `src/`: 源代码目录
  - `api/`: API请求封装
  - `assets/`: 静态资源（图片、图标等）
  - `components/`: 可复用的React组件
  - `config/`: 配置文件
  - `context/`: React Context提供者
  - `hooks/`: 自定义React Hooks
  - `pages/`: 页面组件
    - `Home/`: 首页组件
  - `styles/`: 全局样式
  - `types/`: TypeScript类型定义
  - `utils/`: 工具函数

## 构建输出

- `dist/`: Vite构建输出目录
  - `assets/`: 打包后的资源文件

## Docker构建

前端使用多阶段Docker构建，配置文件为 [frontend/Dockerfile](mdc:frontend/Dockerfile)：

1. **构建阶段**:
   - 使用 `node:18-alpine` 作为基础镜像
   - 使用 pnpm 安装依赖并构建项目
   - 输出构建产物到 `/app/dist` 目录

2. **运行阶段**:
   - 使用 `nginx:alpine` 作为基础镜像
   - 将构建产物复制到 `/app/dist` 和 `/usr/share/nginx/html` 目录
   - 使用命名卷 `frontend_build` 与Nginx容器共享构建产物

## 前端开发

本地开发使用Vite开发服务器：
```bash
cd frontend
pnpm install
pnpm dev
```

## 前端更新

当修改前端代码后，需要使用以下命令更新Docker环境中的前端：
```bash
./scripts/quick-docker.sh --force-rebuild-frontend
```

这会强制重建前端容器并更新Nginx中的静态文件，确保变更生效。

## 环境配置

环境变量配置以`VITE_`前缀，在docker-compose.yml中设置：
- `VITE_API_URL`: API服务地址

## 最佳实践

1. 组件应该按功能和重用性组织
2. 使用Context管理全局状态
3. 使用自定义Hooks抽象复杂逻辑
4. 按页面组织路由和组件结构
5. 前端代码修改后使用 `--force-rebuild-frontend` 选项确保更新生效
