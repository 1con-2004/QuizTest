---
description: 
globs: 
alwaysApply: true
---
# 后端架构指南

项目后端位于[backend/](mdc:backend)目录，使用Java Spring Boot开发。

## 目录结构

- `src/`: 源代码目录
  - `main/`: 主要代码
    - `java/com/quiztest/`: Java代码目录
      - `config/`: 配置类，包含数据库和安全配置
      - `controller/`: API控制器，处理HTTP请求
      - `exception/`: 自定义异常类
      - `model/`: 数据模型
        - `dto/`: 数据传输对象
        - `entity/`: 实体类
          - `mysql/`: MySQL实体
          - `mongo/`: MongoDB实体
      - `repository/`: 数据访问层
        - `mysql/`: MySQL仓库
        - `mongo/`: MongoDB仓库
      - `service/`: 业务逻辑服务
      - `util/`: 工具类和辅助方法
    - `resources/`: 资源文件
      - `application.yml`: 应用配置
      - `application-dev.yml`: 开发环境配置
      - `application-prod.yml`: 生产环境配置
  - `test/`: 测试代码

## 数据库连接

项目使用双数据库架构：
1. **MySQL**: 用于关系型数据
   - 连接URL: `jdbc:mysql://mysql:3306/quiztest?useSSL=false&allowPublicKeyRetrieval=true`
   - 配置位置: application.yml 
   
2. **MongoDB**: 用于非结构化数据
   - 连接URL: `mongodb://mongodb:27017/quiztest`
   - 配置位置: application.yml

## 缓存

使用Redis作为缓存层：
- 连接URL: `redis://redis:6379`
- 配置位置: application.yml

## 认证与授权

使用Spring Security和JWT进行认证：
- JWT密钥配置在环境变量中：`JWT_SECRET`
- 认证配置类: com.quiztest.config.SecurityConfig

## API设计原则

1. RESTful API设计
2. 控制器负责处理HTTP请求和响应
3. 服务层封装业务逻辑
4. 数据访问通过仓库层进行
5. 使用DTO对象进行数据传输
6. 异常处理统一通过全局异常处理器

## 构建与部署

项目使用Maven构建：
- 构建命令: `mvn package`
- 构建输出: `target/quiztest.jar`

使用Docker部署：
- 构建镜像: `docker-compose build backend`
- 启动服务: `docker-compose up -d backend`
- 重新构建并启动: `./scripts/quick-docker.sh --backend-only`

## Spring配置

环境变量注入:
```yml
spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  data:
    mongodb:
      uri: ${SPRING_DATA_MONGODB_URI}
  redis:
    host: ${SPRING_REDIS_HOST}
    port: ${SPRING_REDIS_PORT}
```
